전략 비교 및 적용 가이드
어떤 브랜치 전략을 선택할지는 팀의 특성과 프로젝트의 요구사항에 따라 달라진다.


GitHub Flow
	-복잡도 낮음, 적합한 프로젝트는 소규모 팀, 웹 서비스, MVP       
Git Flow	      
	-복잡도 높음, 적합한 프로젝트는 소프트웨어, 모바일 앱, 패키지
GitLab Flow
	-복잡도 중간, 적합한 프로젝트는 CI/CD 파이프라인이 있는 팀

* 빠른 개발과 배포가 중요하고 팀이 소규모라면 GitHub Flow가 가장 효율적
* 안정적인 버전 관리와 체계적인 릴리스 프로세스가 필수적이라면 Git Flow가 적합
* GitHub Flow의 단순함과 Git Flow의 구조가 모두 필요하다면, GitLab Flow가 좋은 대안

그래서 최종적으로 모든 장점을 아우르는 GitLab Flow을 선택

적용시나리오

main에서 최초단계 html파일 커밋
develop에서 개발 시작
staging에서 최종테스트 시작, 테스트 통과한것은 production으로 전달
production에서 실제 서비스 배포시작, main에 병합

